import e from"mermaid";async function t(t,n,o){o&&e.initialize(o);const r=n??`mermaid-${Date.now()}-${Math.random().toString(36).substr(2)}`;try{const{svg:n}=await e.render(r,t);return n}catch(e){return`<pre style="color:red">${e instanceof Error?e.message:String(e)}</pre>`}}async function n(e,n){const o=document.querySelectorAll(e);for(const e of Array.from(o)){const o=e.textContent||"",r=await t(o,void 0,n?.mermaidConfig);e.innerHTML=r}}function o(o){var r,i;o.mermaidConfig&&e.initialize(o.mermaidConfig),n(o.selector,{mermaidConfig:o.mermaidConfig}),o.observer&&(r=o.selector,i=o.mermaidConfig,new MutationObserver((e=>{for(const n of e)"childList"===n.type&&n.addedNodes.forEach((async e=>{if(e instanceof HTMLElement){if(e.matches(r)){const n=e.textContent||"",o=await t(n,void 0,i);e.innerHTML=o}e.querySelectorAll(r).forEach((async e=>{const n=e.textContent||"",o=await t(n,void 0,i);e.innerHTML=o}))}}))})).observe(document.body,{childList:!0,subtree:!0}))}export{o as initMermaidUI,n as renderAll,t as renderOne};
