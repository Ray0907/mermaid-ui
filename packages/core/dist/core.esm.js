import e from"mermaid";async function n(n,o,t){t&&e.initialize(t);const r=null!=o?o:`mermaid-${Date.now()}-${Math.random().toString(36).substr(2)}`;try{const{svg:o}=await e.render(r,n);return o}catch(e){return`<pre style="color:red">${e instanceof Error?e.message:String(e)}</pre>`}}async function o(e,o){if("undefined"==typeof document)return void console.warn("renderAll can only be used in a browser environment");const t=document.querySelectorAll(e);for(const e of Array.from(t)){const t=e.textContent||"",r=await n(t,void 0,null==o?void 0:o.mermaidConfig);e.innerHTML=r}}function t(e){var t,r;"undefined"!=typeof document?(o(e.selector,{mermaidConfig:e.mermaidConfig}),e.observer&&(t=e.selector,r=e.mermaidConfig,new MutationObserver((e=>{for(const o of e)"childList"===o.type&&o.addedNodes.forEach((async e=>{if(e instanceof HTMLElement){if(e.matches(t)){const o=e.textContent||"",t=await n(o,void 0,r);e.innerHTML=t}e.querySelectorAll(t).forEach((async e=>{const o=e.textContent||"",t=await n(o,void 0,r);e.innerHTML=t}))}}))})).observe(document.body,{childList:!0,subtree:!0}))):console.warn("initMermaidUI can only be used in a browser environment")}export{t as initMermaidUI,o as renderAll,n as renderOne};
//# sourceMappingURL=core.esm.js.map
