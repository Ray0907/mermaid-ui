"use strict";var e=require("mermaid");async function n(n,r,t){t&&e.initialize(t);const o=r??`mermaid-${Date.now()}-${Math.random().toString(36).substr(2)}`;try{const{svg:r}=await e.render(o,n);return r}catch(e){return`<pre style="color:red">${e instanceof Error?e.message:String(e)}</pre>`}}async function r(e,r){if("undefined"==typeof document)return void console.warn("renderAll can only be used in a browser environment");const t=document.querySelectorAll(e);for(const e of Array.from(t)){const t=e.textContent||"",o=await n(t,void 0,r?.mermaidConfig);e.innerHTML=o}}exports.initMermaidUI=function(e){var t,o;"undefined"!=typeof document?(r(e.selector,{mermaidConfig:e.mermaidConfig}),e.observer&&(t=e.selector,o=e.mermaidConfig,new MutationObserver((e=>{for(const r of e)"childList"===r.type&&r.addedNodes.forEach((async e=>{if(e instanceof HTMLElement){if(e.matches(t)){const r=e.textContent||"",t=await n(r,void 0,o);e.innerHTML=t}e.querySelectorAll(t).forEach((async e=>{const r=e.textContent||"",t=await n(r,void 0,o);e.innerHTML=t}))}}))})).observe(document.body,{childList:!0,subtree:!0}))):console.warn("initMermaidUI can only be used in a browser environment")},exports.renderAll=r,exports.renderOne=n;
//# sourceMappingURL=core.cjs.js.map
