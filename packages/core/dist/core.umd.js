!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("mermaid")):"function"==typeof define&&define.amd?define(["exports","mermaid"],n):n((e="undefined"!=typeof globalThis?globalThis:e||self).MyMermaidCore={},e.mermaid)}(this,(function(e,n){"use strict";async function t(e,t,o){o&&n.initialize(o);const r=t??`mermaid-${Date.now()}-${Math.random().toString(36).substr(2)}`;try{const{svg:t}=await n.render(r,e);return t}catch(e){return`<pre style="color:red">${e instanceof Error?e.message:String(e)}</pre>`}}async function o(e,n){if("undefined"==typeof document)return void console.warn("renderAll can only be used in a browser environment");const o=document.querySelectorAll(e);for(const e of Array.from(o)){const o=e.textContent||"",r=await t(o,void 0,n?.mermaidConfig);e.innerHTML=r}}e.initMermaidUI=function(e){var n,r;"undefined"!=typeof document?(o(e.selector,{mermaidConfig:e.mermaidConfig}),e.observer&&(n=e.selector,r=e.mermaidConfig,new MutationObserver((e=>{for(const o of e)"childList"===o.type&&o.addedNodes.forEach((async e=>{if(e instanceof HTMLElement){if(e.matches(n)){const n=e.textContent||"",o=await t(n,void 0,r);e.innerHTML=o}e.querySelectorAll(n).forEach((async e=>{const n=e.textContent||"",o=await t(n,void 0,r);e.innerHTML=o}))}}))})).observe(document.body,{childList:!0,subtree:!0}))):console.warn("initMermaidUI can only be used in a browser environment")},e.renderAll=o,e.renderOne=t}));
//# sourceMappingURL=core.umd.js.map
