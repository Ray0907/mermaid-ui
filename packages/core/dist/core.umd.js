!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("mermaid")):"function"==typeof define&&define.amd?define(["exports","mermaid"],n):n((e="undefined"!=typeof globalThis?globalThis:e||self).MyMermaidCore={},e.mermaid)}(this,(function(e,n){"use strict";async function t(e,t,i){i&&n.initialize(i);const o=t??`mermaid-${Date.now()}-${Math.random().toString(36).substr(2)}`;try{const{svg:t}=await n.render(o,e);return t}catch(e){return`<pre style="color:red">${e instanceof Error?e.message:String(e)}</pre>`}}async function i(e,n){const i=document.querySelectorAll(e);for(const e of Array.from(i)){const i=e.textContent||"",o=await t(i,void 0,n?.mermaidConfig);e.innerHTML=o}}e.initMermaidUI=function(e){var o,r;e.mermaidConfig&&n.initialize(e.mermaidConfig),i(e.selector,{mermaidConfig:e.mermaidConfig}),e.observer&&(o=e.selector,r=e.mermaidConfig,new MutationObserver((e=>{for(const n of e)"childList"===n.type&&n.addedNodes.forEach((async e=>{if(e instanceof HTMLElement){if(e.matches(o)){const n=e.textContent||"",i=await t(n,void 0,r);e.innerHTML=i}e.querySelectorAll(o).forEach((async e=>{const n=e.textContent||"",i=await t(n,void 0,r);e.innerHTML=i}))}}))})).observe(document.body,{childList:!0,subtree:!0}))},e.renderAll=i,e.renderOne=t}));
